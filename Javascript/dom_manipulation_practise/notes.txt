what is dom
--> the dom (document object model) is an application
programming interface (api) for manipulating html and xml documents(add, remove and modify parts of the document/html)

--> when a web page is loaded, the browser creates a DOM of the page.
--> In this DOM tree , the document is the root node or object

--> By DOM, JS gets all the power it needs to create dynamic HTML:
- js can change all html elements , attributes in the page
- it can chnage css styles
- it can add and remove existing html elements and 
- it can react to all existing html events in the page
- it can create new html events in the page

-->  in the dom, all html elements are defined as objects. so it will have both property and method.
--> it represents your web page
--> if you want to access any element in an html page, you always start with accessing the document object


What is DOM Events 
--> dom events are actions that occur as a result of the user action or as result of state chnage of the elements of a DOM tree.

Examples of HTML events
--> When user clicks on the mouse
--> When a web page has loaded
--> When an image has been loaded
--> When the mouse moves over an element
--> When an input field as changes
--> When html form is submitted
--> When a user strokey a key


List of dom events links 
- https://www.w3schools.com/jsref/dom_obj_event.asp
- https://developer.mozilla.org/en-US/docs/Web/Events


Page Load Events 

DOMContentLoaded
--> the browser fully loaded HTML and completed building the DOM tree. However, it hasn't loaded external
resources like stylesheets and images.
In this event , you can start selecting DOM nodes or initialize the interface.

load 
--> the browser fully loaded the html and also external resources like images and stylesheets.
when you leave the page, the following events fire in sequence.



Event Bubbling and Event Capturing
Event Bubbling
--> In the event bubbling model, an event starts at the most specific element and then flows updawrd toward the laest specific 
element(the document or even window).
--> when you click the button, the click events occur in the following order:

innermost element(button)
div wrapper or container
body
html
document

Event Capturing
-->In the event capturing model, an event starts at the least specific element and flows downward
toward the most specific element

-->When you click the button, the click event occurs in the floowing order:
document
html
body
div/container
button (innermost element)

to set the capturing flow , use below syntax

addEventListener(event, function, useCapture);

//useCapture = true = event capturing = outer to innermost 
//default -> useCapture = false = event bubbling = innermost to outermost
the default value is false, which will use the bubbling propagation,
when the value is set to true , the event uses the capturing propagation


BOM (Browser Object Model)

-->the window object represents a window in browser
-->the object of window is created automatically by the browser
-->all global JS objects, functions and variables with the variables
with the var keyword automatically become members of the window object
--> Global variables are properties of the window object
--> Global functions are methods of the window object.










